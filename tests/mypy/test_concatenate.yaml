# yaml-language-server: $schema=https://raw.githubusercontent.com/typeddjango/pytest-mypy-plugins/master/pytest_mypy_plugins/schema.json

- case: concatenate_add
  main: |
    from reexport import concatenate
    from f import *

    def f(v: float) -> int: return 1
    reveal_type(concatenate(f, add=({{ params | join(",") }},))) # N: Revealed type is "def ({% for param in params %}{%- if not loop.first %}, {% endif -%}f.{{ param }}{% endfor %}, v: builtins.float) -> builtins.int"
  files: &source
  - path: f.py
    content: |
      class C1: ...
      class C2: ...
      class C3: ...
      class C4: ...
      class C5: ...
      class C6: ...
      class C7: ...
      class C8: ...
      class C9: ...
  parametrized: &add_params
    - params: [C1]
    - params: [C1, C2]
    - params: [C1, C2, C3]
    - params: [C1, C2, C3, C4]
    - params: [C1, C2, C3, C4, C5]
    - params: [C1, C2, C3, C4, C5, C6]
    - params: [C1, C2, C3, C4, C5, C6, C7]
    - params: [C1, C2, C3, C4, C5, C6, C7, C8]
    - params: [C1, C2, C3, C4, C5, C6, C7, C8, C9]

- case: concatenate_add_as_decorator
  main: |
    from reexport import concatenate
    from f import *

    @concatenate(add=({{ params | join(",") }},))
    def f(v: float) -> int: return 1
    reveal_type(f) # N: Revealed type is "def ({% for param in params %}{%- if not loop.first %}, {% endif -%}f.{{ param }}{% endfor %}, v: builtins.float) -> builtins.int"
  files: *source
  parametrized: *add_params

- case: concatenate_remove
  main: |
    from reexport import concatenate
    from f import *

    def f(v1: C1, v2: C2, v3: C3, v4: C4, v5: C5, v6: C6, v7: C7, v8: C8, v9: C9) -> int: return 1
    reveal_type(concatenate(f, remove={{ id }})) # N: Revealed type is "def ({{ params }}) -> builtins.int"
  files: *source
  parametrized: &remove_params
    - params: "v2: f.C2, v3: f.C3, v4: f.C4, v5: f.C5, v6: f.C6, v7: f.C7, v8: f.C8, v9: f.C9"
      id: 1
    - params: "f.C1, v3: f.C3, v4: f.C4, v5: f.C5, v6: f.C6, v7: f.C7, v8: f.C8, v9: f.C9"
      id: 2
    - params: "f.C1, f.C2, v4: f.C4, v5: f.C5, v6: f.C6, v7: f.C7, v8: f.C8, v9: f.C9"
      id: 3
    - params: "f.C1, f.C2, f.C3, v5: f.C5, v6: f.C6, v7: f.C7, v8: f.C8, v9: f.C9"
      id: 4
    - params: "f.C1, f.C2, f.C3, f.C4, v6: f.C6, v7: f.C7, v8: f.C8, v9: f.C9"
      id: 5
    - params: "f.C1, f.C2, f.C3, f.C4, f.C5, v7: f.C7, v8: f.C8, v9: f.C9"
      id: 6
    - params: "f.C1, f.C2, f.C3, f.C4, f.C5, f.C6, v8: f.C8, v9: f.C9"
      id: 7
    - params: "f.C1, f.C2, f.C3, f.C4, f.C5, f.C6, f.C7, v9: f.C9"
      id: 8
    - params: "f.C1, f.C2, f.C3, f.C4, f.C5, f.C6, f.C7, f.C8"
      id: 9

- case: concatenate_remove_as_decorator
  main: |
    from reexport import concatenate
    from f import *

    @concatenate(remove={{ id }})
    def f(v1: C1, v2: C2, v3: C3, v4: C4, v5: C5, v6: C6, v7: C7, v8: C8, v9: C9) -> int: return 1
    reveal_type(f) # N: Revealed type is "def ({{ params }}) -> builtins.int"
  files: *source
  parametrized: *remove_params

- case: concatenate_transform
  main: |
    from reexport import concatenate
    from f import *

    def f(v1: C1, v2: C2, v3: C3, v4: C4, v5: C5, v6: C6, v7: C7, v8: C8, v9: C9) -> int: return 1
    reveal_type(concatenate(f, transform=({{ id }}, int))) # N: Revealed type is "def ({{params}}) -> builtins.int"
  files: *source
  parametrized: &transform_params
    - params: "builtins.int, v2: f.C2, v3: f.C3, v4: f.C4, v5: f.C5, v6: f.C6, v7: f.C7, v8: f.C8, v9: f.C9"
      id: 1
    - params: "f.C1, builtins.int, v3: f.C3, v4: f.C4, v5: f.C5, v6: f.C6, v7: f.C7, v8: f.C8, v9: f.C9"
      id: 2
    - params: "f.C1, f.C2, builtins.int, v4: f.C4, v5: f.C5, v6: f.C6, v7: f.C7, v8: f.C8, v9: f.C9"
      id: 3
    - params: "f.C1, f.C2, f.C3, builtins.int, v5: f.C5, v6: f.C6, v7: f.C7, v8: f.C8, v9: f.C9"
      id: 4
    - params: "f.C1, f.C2, f.C3, f.C4, builtins.int, v6: f.C6, v7: f.C7, v8: f.C8, v9: f.C9"
      id: 5
    - params: "f.C1, f.C2, f.C3, f.C4, f.C5, builtins.int, v7: f.C7, v8: f.C8, v9: f.C9"
      id: 6
    - params: "f.C1, f.C2, f.C3, f.C4, f.C5, f.C6, builtins.int, v8: f.C8, v9: f.C9"
      id: 7
    - params: "f.C1, f.C2, f.C3, f.C4, f.C5, f.C6, f.C7, builtins.int, v9: f.C9"
      id: 8
    - params: "f.C1, f.C2, f.C3, f.C4, f.C5, f.C6, f.C7, f.C8, builtins.int"
      id: 9

- case: concatenate_transform
  main: |
    from reexport import concatenate
    from f import *

    @concatenate(transform=({{ id }}, int))
    def f(v1: C1, v2: C2, v3: C3, v4: C4, v5: C5, v6: C6, v7: C7, v8: C8, v9: C9) -> int: return 1
    reveal_type(f) # N: Revealed type is "def ({{params}}) -> builtins.int"
  files: *source
  parametrized: *transform_params
